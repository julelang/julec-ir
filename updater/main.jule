// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/build"
use "std/os"
use "std/strings"

cpp type char: byte

cpp fn system(cmd: *cpp.char): int

struct Dist {
	os:   build::DistOS
	arch: build::DistArch
}

static mut LatestHash: str = ""

static Dists: [...]Dist = [
	// Windows
	{os: build::DistOS.Windows, arch: build::DistArch.Amd64},
	{os: build::DistOS.Windows, arch: build::DistArch.I386},
	{os: build::DistOS.Windows, arch: build::DistArch.Arm64},

	// Linux
	{os: build::DistOS.Linux, arch: build::DistArch.Amd64},
	{os: build::DistOS.Linux, arch: build::DistArch.I386},
	{os: build::DistOS.Linux, arch: build::DistArch.Arm64},

	// Darwin
	{os: build::DistOS.Darwin, arch: build::DistArch.Amd64},
	{os: build::DistOS.Darwin, arch: build::DistArch.Arm64},
]

fn system(cmd: str): int {
	ret unsafe { cpp.system((*cpp.char)(&cmd[0])) }
}

// Calls "system" and exits program if returns non-zero.
fn systemE(cmd: str) {
	const ExitCode = 1
	if system(cmd) != 0 {
		os::Exit(ExitCode)
	}
}

fn readLineFromFile(mut &f: &os::File): str {
	let mut line = make([]byte, 0, 100)
	let mut b: []byte = [0]
	for b[0] != '\n' {
		let n = f.Read(b) else {
			println("file cannot read")
			os::Exit(1)
			use 0 // Avoid error.
		}
		if n == 0 {
			break
		}
		line = append(line, b...)
	}
	ret strings::TrimRight(str(line), "\b\r\t\n\v ")
}

fn updateIncludePaths(x: str) {
	let mut f = os::OpenFile(x, os::O_RDWR, 0o660) else {
		println("file cannot open: " + x)
		os::Exit(1)
		ret // Avoid error.
	}

	let mut includeSaw = 0
	for {
		let mut line = readLineFromFile(f)
		if len(line) == 0 {
			continue
		}

		if strings::HasPrefix(line, `#include <`) {
			continue
		}
		if !strings::HasPrefix(line, `#include "`) {
			if includeSaw == 2 {
				break
			}
			continue
		} else if includeSaw < 2 {
			includeSaw++
		}

		f.Seek(-len(line)-1, os::Seek.Cur)!

		let lineLen = len(line)

		const SearchSubs = "/jule/"
		let pos = strings::Index(line, SearchSubs)

		// Remove root directories.
		line = line[pos+len(SearchSubs):]
		line = `#include "` + line
		line += strings::Repeat(" ", lineLen-len(line))
		line += "\n"

		f.Write(([]byte)(line))!
	}
	f.Close()!
}

fn generateIrs() {
	const PATH_JULEC = "./bin/julec"
	const PATH_PACKAGE = "./src/julec"

	for _, dist in Dists {
		let x = str(dist.os) + "-" + str(dist.arch)
		let xp = `./dist/` + x + `.cpp`

		let mut cmd = PATH_JULEC + " -pt --opt L1 "
		cmd += "--target " + x + " "
		cmd += PATH_PACKAGE

		systemE(cmd)
		systemE(`mv ./dist/ir.cpp ` + xp)
		updateIncludePaths(xp)
	}
}

fn setupJulecIr() {
	const URL = "https://github.com/julelang/julec-ir"
	systemE("git clone --depth 1 " + URL) // Clone JuleC-IR repository.
	systemE("rm -rf julec-ir/src")        // Remove sources.
	systemE("mkdir julec-ir/src")         // Create new source directory.
}

fn moveIrsIntoJulecIr() {
	for _, dist in Dists {
		let x = str(dist.os) + "-" + str(dist.arch)
		let xp = x + `.cpp`
		systemE(`mv ./dist/` + xp + ` ./julec-ir/src/` + xp)
	}
}

fn cleanup() {
	systemE("rm -rf ./dist")     // Remove dist directory.
	systemE("rm -rf ./julec-ir") // Remove JuleC-IR clone.
}

fn getLastCommitHash(): str {
	systemE(`git rev-parse HEAD > output.txt`)
	let bytes = os::ReadFile("output.txt") else {
		println("commit has cannot readed")
		os::Exit(1)
		use nil // Avoid error.
	}
	os::Remove("output.txt")!
	ret strings::TrimRight(str(bytes), "\n\t\r\b\v ")
}

fn setLatestHash() {
	LatestHash = getLastCommitHash()
}

fn updateReadmeCommit() {
	const UrlTree = `https://github.com/julelang/jule/tree/`
	const ReadmePath = `./julec-ir/README.md`

	let mut f = os::OpenFile(ReadmePath, os::O_RDWR, 0o660) else {
		println("file cannot open: " + ReadmePath)
		os::Exit(1)
		ret // Avoid error.
	}

	for {
		let mut line = readLineFromFile(f)
		if !strings::HasPrefix(line, `IR version: [`) {
			continue
		}

		f.Seek(-len(line)-1, os::Seek.Cur)!

		let lineLen = len(line)

		let commitHash = LatestHash
		line = "IR version: [`" + commitHash[:10] + "`](" + UrlTree + commitHash + ")"
		line += strings::Repeat(" ", lineLen-len(line))
		line += "\n"

		f.Write(([]byte)(line))!
		break
	}
	f.Close()!
}

fn pushChanges() {
	os::Chdir("julec-ir") else {
		println("working path cannot changed")
		os::Exit(1)
	}

	systemE(`git add . || true`)
	systemE(`git commit -am "update IRs to commit: ` + LatestHash + `" || true`)
	systemE(`git push || true`)

	os::Chdir("..") else {
		println("working path cannot changed")
		os::Exit(1)
	}
}

fn main() {
	setLatestHash()
	generateIrs()
	setupJulecIr()
	moveIrsIntoJulecIr()
	updateReadmeCommit()
	pushChanges()
	cleanup()
}
